#!/usr/bin/env python3
# authors: Angel Leon (@gubatron), Katay Santos (@cateye), Bohdan Horbeshko (@bodqhrohro)
import re
import os
import sys
import getopt
from time import gmtime
import xml.etree.ElementTree as ET

class MissingStringsReport:
    filePath = None
    originalStringsDict = None
    myStringsDict = None
    missingKeys = None

    def __init__(self, stringsFilePath, originalStringsDict):
        '''stringsFilePath - The path to the strings.xml file we want to check.
        originalStringsDict - A dictionary containing all the string-keys and original language values (usually inside res/values/strings.xml)
        '''
        self.stringsFilePath = stringsFilePath
        self.originalStringsDict = originalStringsDict
        self.myStringsDict = MissingStringsReport.readXML(self.stringsFilePath)
        self.missingKeys   = MissingStringsReport.findMissingKeys(self.originalStringsDict, self.myStringsDict)
        self.leftOverKeys  = MissingStringsReport.findLeftoverKeys(self.originalStringsDict, self.myStringsDict)

    def getMissingKeys(self):
        '''Returns a list with the missing keys.'''
        return self.missingKeys

    def getLeftoverKeys(self):
        '''Returns a list of left over keys that should be deleted'''
        return self.leftOverKeys

    def getMyStringsDict(self):
        return self.myStringsDict

    def getCompletePercentage(self):
        return (len(self.myStringsDict)/float(len(self.originalStringsDict))) * 100

    @staticmethod
    def findMissingKeys(fullDict, incompleteDict):
        '''Given the original (fullDict) strings dictionary, this returns a list of the missing keys on incompleteDict.
           If the file is fully translated it will return an empty list.'''
        missingKeys = []
        for k in fullDict:
            if k not in incompleteDict:
                missingKeys.append(k)
        return missingKeys

    @staticmethod
    def findLeftoverKeys(fullDict, incompleteDict):
        '''Given the original (fullDict) strings dictionary, this returns a list of the keys that no longer exist on the
           full dictionary but still exist on the incompleteDict'''
        leftOverKeys = []
        for k in incompleteDict:
            if k not in fullDict:
                leftOverKeys.append(k)
        return leftOverKeys

    @staticmethod
    def readXML(fileName):
        result={}
        tree = ET.parse(fileName)
        root = tree.getroot()
        for string in root.findall('string'):
            if 'translatable' not in string.attrib or string.attrib['translatable'] != 'False':
                result[string.attrib['name']] = string.text
        return result


def getStringsFilePaths():
    '''Gets all the relative paths to strings.xml files in a list.'''
    p = os.popen("find ./res | grep strings.xml")
    filesPath = p.readlines()
    p.close()
    return filesPath

def cleanLeftoverTranslations(filePath, leftOverKeys):
    print("Cleaning " + str(len(leftOverKeys)) + " leftover translations in " + filePath + "\n")
    print(leftOverKeys)
    print("="*80)

    tree = ET.parse(filePath)
    root = tree.getroot()

    for string in root.findall('string'):
        if string.attrib['name'] in leftOverKeys:
            root.remove(string)

    tmpFilePath = filePath + '.tmp'
    tree.write(tmpFilePath, encoding='utf-8', xml_declaration=True)
    os.rename(tmpFilePath, filePath)

def usage():
    usage = """
    ams - Android Missing Strings reporting tool.
    
    Usage:
    ams [-l xx[,yy,zz...]] [--cleanleftovers] -o <output_file>

    Options:
    -h --help            Print this help


    -l --lang <xx>       Specify a language or many with comma separated 2-char language codes.

                         e.g:  -l cn         (creates report for Chinese strings.xml)
                               -l cn,it,fr   (creates report for Chinese, Italian and French strings.xml files)

                         If this parameter is ommited, a report with every language file found will be created.


    -o --oFile           Specify the output file name for the report

    --cleanleftovers     Removes left over translations on other language files

    Copyright (c) 2014-%d - The Mit License (MIT)

    Authors:
    Angel Leon <gubatron@gmail.com>
    Katay Santos <kataysantos@gmail.com>

    """ % (gmtime()[0])
    print(usage)

def main(argv):
    xmlFilePaths=[]
    outputFile = ''
    cleanLeftovers = False
    try:
        opts, args = getopt.getopt(argv, "ho:l:",["ofile=","lang=","cleanleftovers"])
    except getopt.GetoptError:
        print("unhandled option")
        usage()
        sys.exit(2)

    if len(opts) == 0:
        usage()
        print("Error: missing parameters.")
        sys.exit(2)

    for opt, arg in opts:
        if opt == '-h':
            usage()
            sys.exit(2)

        if opt in ("-o", "--ofile"):
            outputFile = arg

        if opt in ("-l", "--lang"):
            if "," in arg:
               languages=arg.split(",")
               for l in languages:
                   xmlFilePaths.append("./res/values-" + l + "/strings.xml")
            else:
                xmlFilePaths=["./res/values-" + arg + "/strings.xml"]
        if opt in ("--cleanleftovers"):
            cleanLeftovers = True

    if outputFile == '':
        usage()
        print("Error: missing -o (output file) parameter.")
        sys.exit(2)

    if len(xmlFilePaths) == 0:
        xmlFilePaths=getStringsFilePaths()

    xmlOriginalFile="./res/values/strings.xml"
    originalDict=MissingStringsReport.readXML(xmlOriginalFile)

    fd = open(outputFile,'w')

    # in case we're going to clean up, we don't need to re-calculate reports
    # if we keep them in this dictionary (path -> MissingStringReport)
    missingStringReports = {}

    for xmlFilePath in xmlFilePaths:
        filePath = xmlFilePath.strip()
        
        if filePath != xmlOriginalFile:
            report = MissingStringsReport(filePath, originalDict)
            if cleanLeftovers:
                missingStringReports[filePath] = report
            print("Generating report for " + filePath + "...")
            fd.write("Language file: " + filePath + "\n")
            fd.write("%d%% completed " % (report.getCompletePercentage()) + "\n")

            if len(report.getMissingKeys()) > 0:
                fd.write("Missing elements: \n\n")
                for missingKey in report.getMissingKeys():
                    tag = "<string name=\"%s\">%s</string>\n" % (missingKey, originalDict[missingKey])
                    fd.write(str(tag.encode('utf-8', 'ignore')))
                fd.write("========================================================================\n\n")
            if len(report.getLeftoverKeys()) > 0:
                fd.write("Leftover elements: \n\n")
                for leftoverKey in report.getLeftoverKeys():
                    tag = u"<string name=\"%s\">...</string>\n" % (leftoverKey)
                    fd.write(tag.encode('utf-8', 'ignore'))
                fd.write("========================================================================\n")
        fd.write("\n-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.\n\n");
    fd.close()
    print("\nSuccess: Android Missing String report ready at " + outputFile)

    if cleanLeftovers:
        print("")
        print("="*80)
        print("")
        for xmlFilePath in xmlFilePaths:
            filePath = xmlFilePath.strip()
            if filePath != xmlOriginalFile:
                report = missingStringReports[filePath]
                cleanLeftoverTranslations(filePath, report.getLeftoverKeys())

if __name__ == '__main__':
    main(sys.argv[1:])
